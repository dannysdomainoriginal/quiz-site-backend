You are a senior developer in the tech industry.
I want you to carefully analyze the code i give, know every single detail.
The goal is for me, an intern, to recreate the app from scratch without looking at the code
So you are to list step-by-step an exercise to recreate the whole thing
I am to be flexible and make my own code original, but the app mustn't miss a functionality
I hope you'll your work properly, I'll be sure to judge you afterwards



~ main.js

//Modal
openModal = (id) => {document.getElementById(id).style.display = "grid"}
closeModal = (id) => { document.getElementById(id).style.display = "none" }

document.querySelector('.close-btn').onclick = () => closeModal("modal")
document.querySelector('.signin-modal').onclick = () => openModal("modal")

document.querySelector('.close-btn-login').onclick = () => closeModal("modal3")
document.querySelector('.login-modal').onclick = () => openModal("modal3")
document.querySelector('.check-results').onclick = () => openModal("modal3")

//Switch Between
let switches = document.querySelectorAll('.switch')
switches.forEach(element => {
    element.onclick = (e) => { 

        if (e.target.classList.contains('to-login')) {
            closeModal('modal')
            openModal('modal3')
        } else if (e.target.classList.contains('to-signin')){
            closeModal('modal3')
            openModal('modal')
        }
    }
});

//Modal2 Show & Hide
document.querySelector('.modal-two').onclick = () => openModal('modal2')
document.querySelector('#modal2').onclick = (e) => {
    if (e.target != document.querySelector('.library-modal') && e.target.parentNode != document.querySelector('.library-modal')) {

        console.log(e.target, e.target.parentNode)
        closeModal('modal2')
    }
}

//Upload Image
let profilePic = document.getElementById('profile-pic')
let inputFile = document.getElementById('input-file')

inputFile.onchange = async () => {

    let [file] = inputFile.files

    const reader = new FileReader()
    reader.onload = (e) => {
        profilePic.src = e.target.result
    }

    reader.onerror = (err) => {
        console.error("Error reading file:", err)
        alert('An error occured while reading file')
    }

    reader.readAsDataURL(file)

}

//Choose From Library
let library = document.querySelectorAll('.library-modal img')
library.forEach(img => {
    img.onclick = (e) => {
        profilePic.src = e.target.src
        closeModal('modal2')
    }
});


//SignUp
signUpForm = document.querySelector('.signup-form')

signUpForm.onsubmit = (e) => {
    e.preventDefault()
    e.stopPropagation() 

    let details = document.querySelectorAll('.signup-form input')
    details = [...details].map(item => item.value)
    details.push(profilePic.src)


    //Profile Creation
    profileCreation = () => {
        currentUser = new newProfile(
            details[0],
            details[1],
            details[2],
            details[3]
        )

        sessionStorage.setItem('CurrentUser', JSON.stringify(currentUser))
        let Users = JSON.parse(localStorage.getItem('Users'))
        
        console.log(Users)
        Users.push(currentUser)
        localStorage.setItem('Users', JSON.stringify(Users))
        console.log(Users)
    }


    nullPass = (value) => {
        if (value == "" || value == null) {
            return false
        }

        return true
    }

    if (details.some(nullPass)) {

        let Users = JSON.parse(localStorage.getItem('Users'))

        if(Users == null) localStorage.setItem('Users', '[]'), Users = JSON.parse(localStorage.getItem('Users'))

        let usedUserNames = Users.map((item) => {
            return item.username
        })

        if (usedUserNames.includes(details[1])) {
            alert('User name already exists')
        } else {
            profileCreation()
            console.log('User created')

            //Test begins
            location.href = './quiz.html'
        }
        
    } else {
        alert('All inputs are required')
    }
}

//LogIn
loginForm = document.querySelector('.login-form')
let userEntry = document.querySelector('.login-form .user-entry')
let pic = document.getElementById('profile-pic2')

userEntry.onchange = (e) => {
    let Users = JSON.parse(localStorage.getItem('Users'))
    
    let user = Users.find(user => user.username == e.target.value)
    if (user) pic.src = user.profilePic

    console.log(Users.map(item => item.username), e.target.value)
}


loginForm.onsubmit = (e) => {

    e.preventDefault()
    e.stopPropagation()
    
    let details = document.querySelectorAll('.login-form input')
    details = [...details].map(item => item.value)

    let Users = localStorage.getItem('Users')

    if(Users == '[]') return alert("User does not exist")
    
    Users = JSON.parse(Users)
    
    const [name, username, password] = details

    Users.forEach(user => {
        if(user.name == name || user.username == username ){
            if (user.name !== name) return alert ("Name does not match")
            if (user.username !== username) return alert ("Username does not match")
            if (user.password !== password) return alert ("Password is incorrect")

            alert("Log In Successful")

            currentUser = Users.find((user) => user.name == name && user.username == username && user.password == password)

            console.log(currentUser)

            currentUser = new newSession(currentUser)
            console.log(currentUser)
            sessionStorage.setItem('CurrentUser', JSON.stringify(currentUser))
            
            location.href = './profile.html'
        } else{
            alert ("User does not exist")
        }
        
    });
}







~ entities.js

var currentUser;

//Profile Class Declaration
class newProfile {
    constructor(name, username, password, profilePic) {
        this.name = name
        this.username = username
        this.password = password
        this.profilePic = profilePic

        this.numberOfTests = 0
        this.currentScore = 0
        this.currentAggregate = 0
        this.currentLevel = "Rookie"

        //Setting the Id
        if (localStorage.getItem("genericId")) {
            this.id = JSON.parse(localStorage.getItem('genericId')) + 1
        } else {
            this.id = 1
        }

        localStorage.setItem('genericId', this.id)

        this.Tests = []
    }
}

class newSession {
    constructor(options = {}) {
        Object.assign(this, options)
    }

    testUpdate(chosenQuestions) {

        let testScore = this.scorer(chosenQuestions)
        let testDate = this.dateTaken()

        this.Tests.push({
            score: testScore,
            date: testDate,
            questions: [...chosenQuestions]
        })

        this.numberOfTests++
        this.currentScore += testScore
        this.currentLevel = this.userLevel()
        this.currentAggregate = this.getAggregate()

        this.upload()

    }

    getAggregate() {
        return `${this.currentScore}/${this.numberOfTests * 20}`
    }

    userLevel() {
        if (this.numberOfTests <= 1) {
            return "Rookie"
        } else if (this.numberOfTests < 5) {
            return "Novice"
        } else if (this.numberOfTests < 10) {
            return "Intermediate"
        } else {
            return "Master"
        }
    }

    scorer(chosenQuestions) {
        let newArray = [...chosenQuestions]
        let score = 0

        //get the score
        for (const question of newArray) {
            if (question.chosenAnswer == question.Answer) {
                score++
            }
        }

        score = score * 2

        return score
    }

    dateTaken() {
        let d = new Date()
        let months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

        let days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]

        return `${days[d.getDay()].slice(0, 3)} ${d.getDate()} ${months[d.getMonth()].slice(0, 3)}`
    }

    upload() {
        sessionStorage.setItem('CurrentUser', JSON.stringify(this))

        let Users = JSON.parse(localStorage.getItem('Users'))
        for (const user of Users) {
            if (user.id == this.id) {
                Users[Users.indexOf(user)] = this
            }
        }

        localStorage.setItem('Users', JSON.stringify(Users))
    }
}




// Data Collection




~ sidebar.js

//Ensure Users Exist

var currentUser;

document.querySelector('body').onload = () => {
    if (!localStorage.getItem('Users') || !sessionStorage.getItem('CurrentUser')) {
        localStorage.setItem('Users', JSON.stringify([]))
        location.href = './index.html'
    }


    //Setup the sidebar profile data
    currentUser = new newSession(
        JSON.parse(sessionStorage.getItem('CurrentUser'))
    )

    let setDetails = () => {
        let name = document.querySelector('.details.name')
        let username = document.querySelector('.details.username')
        let password = document.querySelector('.details.password')
        let profilePic = document.querySelector('.profile .current-profile-pic')
        let noOfTests = document.querySelector('.info .no-of-tests-taken')
        let currentAggregate = document.querySelector('.info .current-aggregate')
        let currentLevel = document.querySelector('.info .current-level')

        //Setting data
        name.innerText = currentUser.name
        username.innerText = currentUser.username
        password.innerText = currentUser.password
        profilePic.src = currentUser.profilePic

        noOfTests.innerText = currentUser.numberOfTests
        currentAggregate.innerText = currentUser.currentAggregate
        currentLevel.innerText = currentUser.currentLevel
    }

    let settings = () => {

        let myProfile = document.querySelector('.sidebar .settings .my-profile-link')
        let takeTest = document.querySelector('.sidebar .settings .take-a-test-link')
        let logOut = document.querySelector('.sidebar .settings .log-out-link')

        myProfile.onclick = () => {
            if (location.href.includes('quiz')) {
                let reply = confirm("Do you want to quit current quiz?")

                if (!reply) {
                    return
                }
            }

            location.href = "./profile.html"
        }

        takeTest.onclick = () => {
            if (location.href.includes('quiz')) {
                let reply = confirm("Do you want to quit current quiz?")

                if (!reply) {
                    return
                }
            }

            location.href = "./quiz.html"
        }

        logOut.onclick = () => {
            if (location.href.includes('quiz')) {
                let reply = confirm("Do you want to quit current quiz?")

                if (!reply) {
                    return
                }
            }

            location.href = "./index.html"
        }

    }

    let profileSetup = () => {
        let testsContainer = document.querySelector('.previous-tests-container')
        let level = document.querySelector('.profile-area-container .level')
        let noOfTests = document.querySelector('.profile-area-container .tests-taken')

        if (currentUser.Tests.length == 0 || currentUser == null) {
            return
        }

        testsContainer.innerHTML = ''
        for (const test of currentUser.Tests) {
            testsContainer.innerHTML +=
                `
                    <div class="prev-test">
                        <div class="score">
                            <span class="big">${test.score}</span>
                            <span class="small">/20</span>
                        </div>

                        <div class="date">${test.date}</div>
                    </div>
                `
        }

        level.innerText = currentUser.currentLevel
        noOfTests.innerText = currentUser.numberOfTests
    }


    //Run functions
    setDetails()
    settings()

    if (location.href.includes('profile')) {
        profileSetup()
    }
}




~ quiz.js

const QUESTIONLIBRARY =
    [
        {
            Question: "Who is the smartest anime character?",
            Id: 1,
            Opt1: "Light Yagami",
            Opt2: "Katagiri Yuichi",
            Opt3: "Ayanokouji Kiyotaka",
            Opt4: "L, Death Note",
            Answer: "Ayanokouji Kiyotaka"
        },

        {
            Question: "Who is the most popular anime character?",
            Id: 2,
            Opt1: "Kamado Tanjiro",
            Opt2: "Eren Yeager",
            Opt3: "Ayanokouji Kiyotaka",
            Opt4: "Light Yagami",
            Answer: "Eren Yeager"
        },

        {
            Question: "What is the most common programming language?",
            Id: 3,
            Opt1: "PHP",
            Opt2: "Javascript",
            Opt3: "C++",
            Opt4: "Java",
            Answer: "Javascript"
        },

        {
            Question: "Which of these is the most popular anime?",
            Id: 4,
            Opt1: "Attack On Titan",
            Opt2: "Demonslayer",
            Opt3: "My Hero Academia",
            Opt4: "Death Note",
            Answer: "Attack On Titan"
        },

        {
            Question: "What is the coolest job in the world?",
            Id: 5,
            Opt1: "Civil Engineer",
            Opt2: "Medical Doctor",
            Opt3: "Software Developer",
            Opt4: "Pilot",
            Answer: "Software Developer"
        },

        {
            Question: "What is the most profitable career path for a Software Developer?",
            Id: 6,
            Opt1: "Getting a 9-5",
            Opt2: "Working for a startup",
            Opt3: "Creating projects as a hobby",
            Opt4: "Building a SAAS application",
            Answer: "Building a SAAS application"
        },

        {
            Question: "What language makes up the skeleton of a website?",
            Id: 7,
            Opt1: "HTML",
            Opt2: "CSS",
            Opt3: "Javascript",
            Opt4: "Python",
            Answer: "HTML"
        },

        {
            Question: "Which of these is a backend framework for Nodejs?",
            Id: 8,
            Opt1: "Flask",
            Opt2: "Express",
            Opt3: "Django",
            Opt4: "Nextjs",
            Answer: "Express"
        },

        {
            Question: "What does CSS stand for?",
            Id: 9,
            Opt1: "Creative Style Sheets",
            Opt2: "Cascading Style Sheets",
            Opt3: "Computer Style Sheets",
            Opt4: "Custom Style Sheets",
            Answer: "Cascading Style Sheets"
        },

        {
            Question: "What language is used for adding dynamic functionality to pages?",
            Id: 10,
            Opt1: "Javascript",
            Opt2: "HTML",
            Opt3: "CSS",
            Opt4: "Django",
            Answer: "Javascript"
        },

        {
            Question: "Which of these is not a backend language?",
            Id: 11,
            Opt1: "PHP",
            Opt2: "Ruby",
            Opt3: "Java",
            Opt4: "Javascript",
            Answer: "Javascript"
        },

        {
            Question: "Which of these is not a frontend framework?",
            Id: 12,
            Opt1: "Reactjs",
            Opt2: "Vue",
            Opt3: "Django",
            Opt4: "Angular",
            Answer: "Django"
        },

        {
            Question: "Which of these is not included in the React Ecosystem?",
            Id: 13,
            Opt1: "Create React App",
            Opt2: "React Router",
            Opt3: "React Meta",
            Opt4: "Redux",
            Answer: "React Meta"
        },

        {
            Question: "What is the most vital tool in programming?",
            Id: 14,
            Opt1: "English Language",
            Opt2: "Integrated Developer Environment",
            Opt3: "Friends",
            Opt4: "Self Confidence",
            Answer: "Integrated Developer Environment"
        },

        {
            Question: "Which of these ways does not get you a girlfriend?",
            Id: 15,
            Opt1: "Meet up with a girl",
            Opt2: "Approach a girl",
            Opt3: "Ignore female species",
            Opt4: "Slide into her dms",
            Answer: "Ignore female species"
        },

        {
            Question: "Who is the smartest of the following?",
            Id: 16,
            Opt1: "Light Yagami",
            Opt2: "Charles Daniel",
            Opt3: "Ayanokouji Kiyotaka",
            Opt4: "L, Death Note",
            Answer: "Charles Daniel"
        },

        {
            Question: "Who is the strongest anime character in the entire verse?",
            Id: 17,
            Opt1: "Saitama",
            Opt2: "Goku",
            Opt3: "Vegeta",
            Opt4: "Ayanokouji Kiyotaka",
            Answer: "Saitama"
        },

        {
            Question: "Who is the smartest anime character in the entire verse?",
            Id: 18,
            Opt1: "Light Yagami",
            Opt2: "Katagiri Yuichi",
            Opt3: "Ayanokouji Kiyotaka",
            Opt4: "L, Death Note",
            Answer: "Ayanokouji Kiyotaka"
        },

        {
            Question: "Who is the strongest character out of the following?",
            Id: 19,
            Opt1: "Homelander",
            Opt2: "Superman",
            Opt3: "Omni-man",
            Opt4: "Thor",
            Answer: "Omni-man"
        },

        {
            Question: "What is the first step to being a web developer?",
            Id: 20,
            Opt1: "Surfing the web",
            Opt2: "Learning HTML",
            Opt3: "Starting a business",
            Opt4: "Binge-watching anime",
            Answer: "Learning HTML"
        },

    ]





//Test Function
const beginTest = () => {

    //Set First Questions
    var testNumber = 0
    var chosenAnswers = []

    //Get Questions
    let chosenQuestions = []

    for (i = 0; i < 10;) {

        let rando = Math.floor(Math.random() * 20)

        if (chosenQuestions.includes(QUESTIONLIBRARY[rando])) {
            console.log('Nah')
        } else {
            chosenQuestions.push(QUESTIONLIBRARY[rando])
            chosenQuestions[i].Id = i + 1
            i++
        }

    }

    let con = document.querySelector('.options-container')
    con.style.height = "256px"
    let questionNumber = document.querySelector('.question-container .number')
    let progressBar = document.querySelector('.progress-bar .progress')

    //Test Submission
    const Submission = () => {
        let user = new newSession(
            JSON.parse(sessionStorage.getItem('CurrentUser'))
        )

        user.testUpdate(chosenQuestions)
        location.href = "./profile.html"
    }
    
    //Timer
    let Timer = () => {

        const startingMinutes = 5
        let time = startingMinutes * 60
        let countDown = document.querySelector('.question-container .timer')

        let updateCountDown = () => {
            let minutes = Math.floor(time / 60)
            let seconds = time % 60

            if (seconds < 10) { seconds = "0" + seconds }
            
            if (time < 0) {
                clearInterval(timerInterval)
                alert(`Your time has elasped
                Your test will be auto-submitted`
                )

                Submission()
                return
            }

            countDown.innerHTML = `0${minutes}:${seconds}`
            time--
        }

        let timerInterval = setInterval(updateCountDown, 1000)

    }

    //Question Generation
    let generateQuestion = () => {
        let currentQuestion = chosenQuestions[testNumber]

        con.innerHTML = `<div class="overlay"></div>`

        if (testNumber < 9) {
            questionNumber.innerText = `0${testNumber + 1}`
        } else {
            questionNumber.innerText = `${testNumber + 1}`
        }
        progressBar.style.width = `${((testNumber + 1) / 10) * 100}%`
        

        document.querySelector('.question').innerText = currentQuestion.Question

        for (let i = 0; i < 4; i++) {

            let id = i + 1

            let label = document.createElement('label')
            label.setAttribute('for', `opt${id}`)
            label.classList.add('options')

            if (currentQuestion[`Opt${id}`] == currentQuestion.Answer) {
                label.classList.add('right')
            }

            let span = document.createElement('span')
            span.innerText = currentQuestion[`Opt${id}`]

            let input = document.createElement('input')
            input.setAttribute('type', "radio")
            input.setAttribute('name', "options")
            input.setAttribute('value', currentQuestion[`Opt${id}`])
            input.setAttribute('id', `opt${id}`)

            label.appendChild(span)
            label.appendChild(input)

            con.appendChild(label)
            
        }

        

        // After picking options
        const options = document.querySelectorAll('.options input')


        if (currentQuestion.chosen) {
            document.querySelector('.options-container .overlay').style.display = 'block'
            document.querySelector('.options.right').classList.add('chosen')
            
            document.getElementById(currentQuestion.chosen.id).parentElement.classList.add('chosen')

            console.log(currentQuestion.chosen, currentQuestion.chosen.parentElement)
        } else {
            options.forEach(option => {
                option.onclick = () => {
                    let chosenOption = document.querySelector('.options-container input:checked')

                    document.querySelector('.options-container .overlay').style.display = 'block'
                    document.querySelector('.options.right').classList.add('chosen')

                    currentQuestion.chosen = chosenOption
                    currentQuestion.chosenAnswer = chosenOption.value
                    console.log(currentQuestion, chosenQuestions)
                }
            });
        }

    }

    let nextBtn = document.querySelector('.next-question')
    let prevBtn = document.querySelector('.prev-question')

    nextBtn.onclick = () => {

        if (testNumber == 8) {
            nextBtn.innerText = "Submit"
        } else {
            nextBtn.innerText = "Next"
        }
        if (testNumber < 9) {
            testNumber++
            generateQuestion()
        } else {
            let submit = confirm('Would You Like To Submit?')

            if (submit) {
                Submission()
                location.href = "./profile.html"
            }
        }
    }

    prevBtn.onclick = () => {
        if (testNumber > 0) {
            testNumber--
            nextBtn.innerText = "Next"
            generateQuestion()

        }
    }



    console.log(chosenQuestions)

    generateQuestion()
    Timer()
    
}

beginTest()

newArray = [1, 2, 3]
for (const value of newArray) {
    let me = {
        id: 1,
        value: "ME"
    }
    if (newArray.indexOf(value) == me.id) {
        newArray[newArray.indexOf(value)] = me
    }
}

console.log(newArray)




~ index.html

<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href="./css/style.css">
        <title>Quiz Site</title>
    </head>

    <body>

        <section class="full-container">
            <img src="./images/Quiz Logo.PNG" alt="" class="logo">
            <div class="b-container">
                <button class="home-btn 1 signin-modal">Take A Quiz</button>
                <button class="home-btn 2 login-modal">Log In</button>
                <button class="home-btn 3 check-results">Check Results</button>
            </div>

        </section>

        <div class="modal-container" id="modal">
            <div class="modal">
                <div class="image-upload">
                    <img src="./images/instructor8.png" alt="" id="profile-pic">
                    <div class="btn-div">
                        <label for="input-file" class="input-file">Upload Image</label>
                        <input type="file" id="input-file" accept="image/jpg, image/png, image/jpeg">
                        <button class="btn modal-two">From Our Library</button>
                    </div>
                </div>

                <form action="" class="signup-form" onsubmit = console>
                    <div class="input-div">
                        <label for="Name">Name</label>
                        <input type="text" name="" id="Name" class="signup-input">
                    </div>
                    <div class="input-div">
                        <label for="Username">Username</label>
                        <input type="text" name="" id="Username" class="signup-input">
                    </div>
                    <div class="input-div">
                        <label for="Password">Password</label>
                        <input type="text" name="" id="Password" class="signup-input">
                    </div>

                    <button type="submit" class="submit-btn">Sign Up</button>
                    <p class="switch to-login">Already have an account?</p>
                </form>
            </div>

            <p class="close-btn">
                X
            </p>

            <div class="modal-container" id="modal2">
                <div class="library-modal">
                    <img src="./images/instructor8.png" alt="">
                    <img src="./images/bottom right.png" alt="">
                    <img src="./images/bottome left.png" alt="">
                    <img src="./images/top left.png" alt="">
                    <img src="./images/top right.png" alt="">
                    <img src="./images/top right.png" alt="">
                    <img src="./images/top left.png" alt="">
                    <img src="./images/instructor8.png" alt="">
                    <img src="./images/bottome left.png" alt="">
                    <img src="./images/bottom right.png" alt="">
                </div>
            </div>
        </div>

        <div class="modal-container" id="modal3">
            <div class="modal login">
                <div class="image-upload">
                    <img src="./images/instructor8.png" alt="" id="profile-pic2">
                </div>
        
                <form action="" class="login-form">
                    <div class="input-div">
                        <label for="Name">Name</label>
                        <input type="text" name="" id="Name" class="login-input">
                    </div>
                    <div class="input-div">
                        <label for="Username">Username</label>
                        <input type="text" name="" id="Username" class="login-input user-entry">
                    </div>
                    <div class="input-div">
                        <label for="Password">Password</label>
                        <input type="text" name="" id="Password" class="login-input">
                    </div>
        
                    <button type="submit" class="submit-btn">Log In</button>
                    <p class="switch to-signin">Don't have an account?</p>
                </form>
            </div>
        
            <p class="close-btn-login">
                X
            </p>
        </div>
        <script>
            document.querySelector('body').onload = () => {
                if (!localStorage.getItem('Users') || !sessionStorage.getItem('CurrentUser')) {
                    localStorage.setItem('Users', JSON.stringify([]))
                }
                console.log(JSON.parse(localStorage.getItem('Users')))
            }
        </script>
        <script src="js/entities.js"></script>
        <script src="js/main.js"></script>
    </body>

</html>




~ profile.html
<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Test</title>

        <link rel="stylesheet" href="./css/style.css">
        <link rel="stylesheet" href="./css/sidebar.css">
    </head>

    <body>

        <section class="main-container">
            <div class="sidebar">
                <div class="sidebar-container">
                    <div class="profile">
                        <div class="img-container">
                            <img class="current-profile-pic" src="./images/bottom right.png" alt="">
                        </div>

                        <div class="details-container">
                            <h4 class="details name">Charles</h4>
                            <h4 class="details username">charles_dgaf</h4>
                            <h4 class="details password">charles_dgaf123</h4>
                        </div>
                    </div>

                    <div class="info">
                        <h4>Number of Tests Taken</h4>
                        <p class="no-of-tests-taken">2</p>
                        <h4>Current Aggregate</h4>
                        <p class="current-aggregate">1.5</p>
                        <h4>Current Level</h4>
                        <p class="current-level">Rookie</p>
                    </div>

                    <div class="settings">
                        <h4 class="my-profile-link">My Profile</h4>
                        <h4 class="take-a-test-link">Take A Test</h4>
                        <h4 class="log-out-link">Log Out</h4>
                    </div>
                </div>
            </div>

            <div class="profile-area">
                <div class="previous-tests">
                    <h1>Previous Tests</h1>
                    <div class="previous-tests-container">
                        <h2 class="no-tests">You've not done any quizzes</h2>

                        <!-- The Prev-tests Are Spawned In Here -->
                    </div>
                </div>

                <div class="profile-area-container">
                    <div class="current-level">
                        <h1>Current Level</h1>
                        <h2 class="level">Rookie</h2>
                    </div>
                    <div class="no-of-tests">
                        <h1>Tests Taken</h1>
                        <h2 class="tests-taken">0</h2>
                    </div>
                </div>
            </div>
        </section>

        <script src="./js/entities.js"></script>
        <script src="./js/sidebar.js"></script>

    </body>

</html>




~ quiz.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test</title>

    <link rel="stylesheet" href="./css/style.css">
    <link rel="stylesheet" href="./css/sidebar.css">
</head>
<body>
    
    <section class="main-container">
        <div class="sidebar">
            <div class="sidebar-container">
                <div class="profile">
                    <div class="img-container">
                        <img class="current-profile-pic" src="./images/bottom right.png" alt="">
                    </div>

                    <div class="details-container">
                        <h4 class="details name">Charles</h4>
                        <h4 class="details username">charles_dgaf</h4>
                        <h4 class="details password">charles_dgaf123</h4>
                    </div>
                </div>

                <div class="info">
                    <h4>Number of Tests Taken</h4>
                    <p class="no-of-tests-taken">2</p>
                    <h4>Current Aggregate</h4>
                    <p class="current-aggregate">1.5</p>
                    <h4>Current Level</h4>
                    <p class="current-level">Rookie</p>
                </div>

                <div class="settings">
                    <h4 class="my-profile-link">My Profile</h4>
                    <h4 class="take-a-test-link">Take A Test</h4>
                    <h4 class="log-out-link">Log Out</h4>
                </div>
            </div>
        </div>

        <div class="main">
            <div class="main-div-container">
                <div class="begin-test">
                    <img src="./images/top left.png" alt="">

                    <button class="begin-test-btn">
                        Begin Test
                    </button>
                </div>

                <div class="progress-bar">
                    <div class="progress"></div>
                </div>

                <div class="question-container">
                    <div class="timer">05:00</div>
                    <div class="number">25</div>
                    <h2 class="question">
                        What is the fastest bird on land? 
                    </h2>
                </div>

                <div class="options-container">
                    <div class="overlay"></div>
                    <label for="opt1" class="options right">
                        <span>Ostrich</span>
                        <input type="radio" name="options" value="Ostrich" id="opt1">
                    </label>
                    <label for="opt2" class="options">
                        <span>Ostrich</span>
                        <input type="radio" name="options" value="Ostrich" id="opt2">
                    </label>
                    <label for="opt3" class="options">
                        <span>Ostrich</span>
                        <input type="radio" name="options" value="Ostrich" id="opt3">
                    </label>
                    <label for="opt4" class="options">
                        <span>Ostrich</span>
                        <input type="radio" name="options" value="Ostrich" id="opt4">
                    </label>
                    
                </div>

                <div class="buttons">
                     <button class="prev-question">Previous</button>
                     <button class="next-question">Next</button>
                </div>
            </div>
        </div>
    </section>

    <script src="./js/entities.js"></script>
    <script src="./js/sidebar.js"></script>
    <script src="./js/test.js"></script>

</body>
</html>




... Also pay attention to the queryselectors, the elements, what they are used and how they are used
Use the script tags to know which scripts are used in the html and where
